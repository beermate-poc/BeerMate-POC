<!--
Strike by Appiphony

Version: 1.0.0
Website: http://www.lightningstrike.io
GitHub: https://github.com/appiphony/Strike-Components
License: BSD 3-Clause License
-->



<aura:component controller="strike_lookupController" access="global">
    <!-- Required -->
    <aura:attribute name="label" type="String" required="true" description="String value displayed above the menu used to describe the component"/>
    <aura:attribute name="object" type="String" required="true" description="String value that determines which records to search"/>
    <aura:attribute name="searchField" type="String" required="true" description="String value that determines which api fields on the object will be searched against, comma delimited string"/>

    <aura:attribute name="columnsToDisp" type="String" description="String value that determines which fields will be displayed as columns" />
    <aura:attribute name="fieldToDisp" type="String" required="true" description="Single field to display when user selects record"/>
	<aura:attribute name="dontDisp" type="String" required="true" description="Fields that are queried but not displayed in table"/>

    <aura:attribute name="helpText" type="String" description="String value when hovering over the help box"/>
    <aura:attribute name="helpTextPlacement" type="String" default="auto top" description="Determines position of the helpText"/>
    <aura:attribute name="class" type="String" description="A CSS class that will be applied to the outer element. This style is in addition to base classes associated with the component"/>
    <aura:attribute name="placeholder" type="String" description="String value that will appear when no record is selected"/>
    <aura:attribute name="value" type="String" description="String value that holds the Id of the selected record"/>

    <aura:attribute name="iconName" type="String" description="String value that determines the icon name or path"/>
    <aura:attribute name="customIcon" type="Boolean" description="Determines whether the icon is custom or standard"/>

    <!-- Query -->
    <aura:attribute name="subtitleField" type="String" description="String value that determines which field to display second from search results"/>
    <aura:attribute name="filter" type="String" description="String value that determines how the SOQL search will be filtered"/>
    <aura:attribute name="order" type="String" description="String value that determines how the SOQL search will be ordered"/>
    <aura:attribute name="limit" type="String" description="String value that determines how many records are returned in the SOQL search"/>
    <aura:attribute name="pageNumber" type="Integer" description="Integer value that determines page number passed in from parent component" default="1"/> 
    <aura:attribute name="offset" type="String" description="String value that determines offset value" default="0"/>


    <!-- Messages -->
    <aura:attribute name="loadingMessage" type="String" default="Loading..." description="String value that will appear when the component is initializing"/>
    <aura:attribute name="searchingMessage" type="String" default="Searching..." description="String value that will appear when the component is searching"/>
    <aura:attribute name="noResultsMessage" type="String" default="No results found for {0}" description="String value that will appear when the component finds 0 results"/>
    <aura:attribute name="errorMessage" type="String" description="String value displayed when the input is in an error state"/>

    <!-- New Records -->
    <aura:attribute name="allowNewRecords" type="Boolean" description="Determines whether the New Record option is displayed"/>
    <aura:attribute name="overrideNewEvent" type="Boolean" description="Determines whether the standard new event should fire"/>

    <aura:attribute name="showRecentRecords" type="Boolean" description="Determines whether the five most recently viewed records will be displayed when the search field is empty"/>

    <aura:attribute name="disabled" type="Boolean" description="Determines whether the input is disabled"/>
    <aura:attribute name="required" type="Boolean" description="Determines whether a '*' is displayed on the component"/>
    <aura:attribute name="error" type="Boolean" description="Determines whether the input is in an error state"/>

    <!-- Methods -->
    <aura:method name="showError" action="{!c.showError}" description="A method which triggers the error state">
        <aura:attribute name="errorMessage" type="String"/>
    </aura:method>
    <aura:method name="hideError" action="{!c.hideError}" description="A method which removes the error state"/>

    <!-- Internal -->
    <aura:attribute name="focusIndex" type="Integer" description="Integer value that determines which record is focused" access="private"/>
    <aura:attribute name="idNumber" type="Integer" description="Random id assigned to pair labels with inputs" access="private"/>
    <aura:attribute name="initCallsRunning" type="Integer" default="{!0}" description="Integer value that determines how many calls are running during init" access="private"/>
    <aura:attribute name="lastSearchTerm" type="String" description="String value that holds the last searched term" access="private"/>
    <aura:attribute name="openMenu" type="Boolean" default="{!false}" description="Determines whether the menu is open" access="private"/>
    <aura:attribute name="objectLabel" type="String" description="String value that holds the label of the object" access="private"/>
    <aura:attribute name="recentRecords" type="Object[]" description="List of the most recent records" access="private"/>
    <aura:attribute name="records" type="Object[]" description="List of records returned from the SOQL search" access="private"/>
    <aura:attribute name="recordsToDisp" type="Object[]" description="List of records returned from the SOQL search" />
    
    <aura:attribute name="searching" type="Boolean" description="Boolean value marked when searching" access="private"/>
    <aura:attribute name="searchTimeout" type="Object" description="Object that holds the search Timeout" access="private"/>
    <aura:attribute name="valueLabel" type="String" description="String value that holds the searchField of the selected record"/>
    <aura:attribute name="valueSublabel" type="String" description="String value that holds the subtitleField of the selected record" access="private"/>
    <aura:attribute name="isMobile" type="Boolean" default="{!false}" description="Determines if the user is in Salesforce1" access="private"/>

    <aura:attribute name="fieldHeaders" type="String[]" description="List of field names displayed for table headers."/>
    <aura:attribute name="labelToApi" type="Object" description="Map of field api names to field labels" access="private"/>
    <aura:attribute name="searchFieldLabels" type="String[]" description="List of field labels for search field inputs" />

    <!-- Event registration and handlers -->
    <aura:handler name="init" value="{!this}" action="{!c.onInit}"/>
    <aura:handler name="change" value="{!v.focusIndex}" action="{!c.handleFocusIndexChange}"/>
    <aura:handler name="change" value="{!v.value}" action="{!c.handleValueChange}"/>

    <aura:handler name="change" value="{!v.object}" action="{!c.handleObjectChange}"/>
    <aura:handler name="change" value="{!v.searchField}" action="{!c.handleSearchfieldChange}"/>
    <aura:handler name="change" value="{!v.subtitleField}" action="{!c.handleSubtitlefieldChange}"/>
    <aura:handler name="change" value="{!v.filter}" action="{!c.handleFilcterChange}"/>
    <aura:handler name="change" value="{!v.order}" action="{!c.handleOrderChange}"/>
    <aura:handler name="change" value="{!v.limit}" action="{!c.handleLimitChange}"/>
    
    
    <aura:handler name="updatePage" event="c:strike_evt" action="{!c.getNextBatch}" />

    <aura:registerEvent name="strike_evt_addNewRecord" type="c:strike_evt" description="Fires an event that notifies when the strike_evt_addNewRecord button is pressed"/>

    <aura:registerEvent name="selectRecord" type="c:strike_evt" description="Fires an event that notifies when a record is selected" />

    <aura:dependency resource="force:createRecord" type="EVENT"/>

    <!-- Strike Lookup -->
    <ui:scrollerWrapper aura:id="lookup" class="{!'slds-form-element slds-lookup slds-is-open ' + if(v.error, 'slds-has-error ', '') + if(v.isMobile, 'sl-lookup--mobile ', '') + if(v.openMenu, 'sl-lookup--open ', '') + v.class}">
        <label class="slds-form-element__label" for="{!'strike-lookup-' + v.idNumber}">
            <aura:if isTrue="{!v.required}">
                <abbr class="slds-required" title="required">*</abbr>
            </aura:if>
            {!v.label}  
        </label>
        <aura:if isTrue="{!not(empty(v.helpText))}">
            <c:strike_tooltip placement="{!v.helpTextPlacement}" text="{!v.helpText}" class="sl-help-text-icon">
                <lightning:icon iconName="utility:info" size="xx-small"/>
            </c:strike_tooltip>
        </aura:if>
        <div class="{!'slds-form-element__control slds-input-has-icon slds-input-has-icon--right' + if(v.disabled, ' sl-disabled', '')}" > <!-- onclick="c.cancelLookup}" -->
            <div class="{!'sl-lookup__input_container' + if(v.isMobile == true, ' slds-grid slds-grid--pull-padded-xx-small', '')}">
                <div class="{!'sl-lookup__input' + if(v.isMobile == true, ' slds-col slds-p-horizontal--xx-small', '')}">
                    <aura:iteration items="{!v.searchFieldLabels}" var="fieldName">
                        <div class="slds-p-around_xx-small">
                            <input
                                    aura:id="lookupInput"
                                    id="{!'strike-lookup-' + v.idNumber}"
                                    name="{!'input-' + v.idNumber}"
                                    class="slds-lookup__search-input slds-input js-template-lookup"
                                    type="text"
                                    aria-autocomplete="list"
                                    role="combobox"
                                    aria-expanded="false"
                                    placeholder="{!fieldName}"
                                    disabled='{!v.disabled}'
                            />
                        </div>
                    </aura:iteration>
                    <div class="slds-p-bottom_x-small">
                        <lightning:button variant="brand" label="Search" onclick="{!c.handleSearchClick}" />
                    </div>
                </div>
                <aura:if isTrue="{!v.isMobile}">
                    <div class="sl-lookup--mobile__cancel slds-col slds-no-flex slds-p-horizontal--xx-small slds-p-bottom_x-small">
                        <button class="slds-button slds-button--neutral" onclick="{!c.cancelLookup}">Cancel</button>
                    </div>
                </aura:if>
            </div>
            <div class="{!if(v.searching, '', 'slds-hide')}" role="listbox" onclick="{!c.handleSearchingClick}">
                <ul class="slds-lookup__list" role="listbox">
                    <li role="presentation">
                        <span class="slds-lookup__item-action slds-media sl-searching" role="option">
                            <div class="slds-media__body">
                                <div class="slds-lookup__result-text">{!v.searchingMessage}</div>
                            </div>
                        </span>
                    </li>
                </ul>
            </div>
            <div class="{!if(and(v.searching == false, v.openMenu), '', 'slds-hide')}" role="listbox">
                <div class="{!if(or(v.records == null, v.records.length == 0), '', 'slds-hide')}">
                    <ul class="slds-lookup__list" role="listbox">
                        <li role="presentation">
                            <span class="slds-lookup__item-action slds-media sl-no-results" role="option">
                                <div class="slds-media__body">
                                    <div class="slds-lookup__result-text">
                                        {!format(v.noResultsMessage, '"' + v.lastSearchTerm + '"')}
                                    </div>
                                </div>
                            </span>
                        </li>
                    </ul>
                </div>
                <table aura:id="lookupMenu" class="{!'slds-table_cell-buffer slds-table_bordered slds-table_striped ' + if(v.searching, 'slds-hide', '') }">
                    <tr scope="row" class="slds-line-height_reset">
                        <aura:iteration items="{!v.fieldHeaders}" var="field">
                            <aura:if isTrue="{!field != 'id'}">
                                
                                <th class="slds-text-title_caps" scope="col">{!field}</th>
                            </aura:if>
                        </aura:iteration>
                    </tr>
                 <aura:iteration items="{!v.recordsToDisp}" var="record" indexVar="index">
                        <tr scope="row" onclick="{!c.handleRecordClick}" style="cursor:pointer" data-index="{!index}" >
                            <aura:iteration items="{!record}" var="field" >
                                <aura:if isTrue="{! field.fieldName != 'id'}">
                                    <td >
                                        {!field.value}
                                    </td>
                                </aura:if>
                            </aura:iteration>
                        </tr>
                 </aura:iteration>
                </table >
            </div>
        </div>
        <aura:if isTrue="{! v.recordsToDisp.length > 0 }">
            <c:ServerSidePagination aura:id="pagination" resultSize="{!v.recordsToDisp.length}" pageSize="{!v.limit}" pageNumber="{!v.pageNumber}"/>
        </aura:if>  
        <aura:if isTrue="{!and(v.error, not(empty(v.errorMessage)))}">
            <div class="slds-form-element__help">{!v.errorMessage}</div>
        </aura:if>
    </ui:scrollerWrapper>
</aura:component>
<!--
Copyright 2017 Appiphony, LLC

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote 
products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->